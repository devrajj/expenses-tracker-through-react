{"ast":null,"code":"var _jsxFileName = \"/Users/devrajsen/Downloads/react-first-project/src/components/Charts/ExpenseChart.js\";\nimport Chart from './Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseChart(props) {\n  console.log('props.expenses:', props.expenses);\n  let chartData = [{\n    label: 'Jan',\n    count: 0\n  }, {\n    label: 'Feb',\n    count: 0\n  }, {\n    label: 'Mar',\n    count: 0\n  }, {\n    label: 'Apr',\n    count: 0\n  }, {\n    label: 'May',\n    count: 0\n  }, {\n    label: 'Jun',\n    count: 0\n  }, {\n    label: 'Jul',\n    count: 0\n  }, {\n    label: 'Aug',\n    count: 0\n  }, {\n    label: 'Sep',\n    count: 0\n  }, {\n    label: 'Oct',\n    count: 0\n  }, {\n    label: 'Nov',\n    count: 0\n  }, {\n    label: 'Dec',\n    count: 0\n  }];\n\n  for (const expenses of props.expenses) {\n    const month = new Date(expenses.date).getMonth();\n    chartData[month].count += expenses.amount;\n    const expenseYear = new Date(expenses.date).getFullYear();\n    console.log('expenseYear:', expenseYear, props.year);\n\n    if (props.year === 'All Expenses') {\n      chartData[month].count += expenses.amount;\n    } else {\n      if (expenseYear.toString() === props.year) {\n        console.log('inside if');\n        chartData[month].count += expenses.amount;\n      }\n    }\n  }\n\n  console.log('chartData:', chartData);\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    chartData: chartData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ExpenseChart;\nexport default ExpenseChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseChart\");","map":{"version":3,"sources":["/Users/devrajsen/Downloads/react-first-project/src/components/Charts/ExpenseChart.js"],"names":["Chart","ExpenseChart","props","console","log","expenses","chartData","label","count","month","Date","date","getMonth","amount","expenseYear","getFullYear","year","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,SAAlB;;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,KAAK,CAACG,QAArC;AACA,MAAIC,SAAS,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADc,EAKd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALc,EASd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GATc,EAad;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAbc,EAiBd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAjBc,EAqBd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GArBc,EAyBd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAzBc,EA6Bd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GA7Bc,EAiCd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAjCc,EAqCd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GArCc,EAyCd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GAzCc,EA6Cd;AACED,IAAAA,KAAK,EAAE,KADT;AAEEC,IAAAA,KAAK,EAAE;AAFT,GA7Cc,CAAhB;;AAkDA,OAAK,MAAMH,QAAX,IAAuBH,KAAK,CAACG,QAA7B,EAAuC;AACrC,UAAMI,KAAK,GAAG,IAAIC,IAAJ,CAASL,QAAQ,CAACM,IAAlB,EAAwBC,QAAxB,EAAd;AACAN,IAAAA,SAAS,CAACG,KAAD,CAAT,CAAiBD,KAAjB,IAA0BH,QAAQ,CAACQ,MAAnC;AACA,UAAMC,WAAW,GAAG,IAAIJ,IAAJ,CAASL,QAAQ,CAACM,IAAlB,EAAwBI,WAAxB,EAApB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,WAA5B,EAAyCZ,KAAK,CAACc,IAA/C;;AACA,QAAId,KAAK,CAACc,IAAN,KAAe,cAAnB,EAAmC;AACjCV,MAAAA,SAAS,CAACG,KAAD,CAAT,CAAiBD,KAAjB,IAA0BH,QAAQ,CAACQ,MAAnC;AACD,KAFD,MAEO;AACL,UAAIC,WAAW,CAACG,QAAZ,OAA2Bf,KAAK,CAACc,IAArC,EAA2C;AACzCb,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAE,QAAAA,SAAS,CAACG,KAAD,CAAT,CAAiBD,KAAjB,IAA0BH,QAAQ,CAACQ,MAAnC;AACD;AACF;AACF;;AACDV,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,SAA1B;AACA,sBACE,QAAC,KAAD;AAAO,IAAA,SAAS,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;KAtEQL,Y;AAuET,eAAeA,YAAf","sourcesContent":["import Chart from './Chart';\nfunction ExpenseChart(props) {\n  console.log('props.expenses:', props.expenses);\n  let chartData = [\n    {\n      label: 'Jan',\n      count: 0\n    },\n    {\n      label: 'Feb',\n      count: 0\n    },\n    {\n      label: 'Mar',\n      count: 0\n    },\n    {\n      label: 'Apr',\n      count: 0\n    },\n    {\n      label: 'May',\n      count: 0\n    },\n    {\n      label: 'Jun',\n      count: 0\n    },\n    {\n      label: 'Jul',\n      count: 0\n    },\n    {\n      label: 'Aug',\n      count: 0\n    },\n    {\n      label: 'Sep',\n      count: 0\n    },\n    {\n      label: 'Oct',\n      count: 0\n    },\n    {\n      label: 'Nov',\n      count: 0\n    },\n    {\n      label: 'Dec',\n      count: 0\n    }\n  ];\n  for (const expenses of props.expenses) {\n    const month = new Date(expenses.date).getMonth();\n    chartData[month].count += expenses.amount;\n    const expenseYear = new Date(expenses.date).getFullYear();\n    console.log('expenseYear:', expenseYear, props.year);\n    if (props.year === 'All Expenses') {\n      chartData[month].count += expenses.amount;\n    } else {\n      if (expenseYear.toString() === props.year) {\n        console.log('inside if');\n        chartData[month].count += expenses.amount;\n      }\n    }\n  }\n  console.log('chartData:', chartData);\n  return (\n    <Chart chartData={chartData} />\n  )\n}\nexport default ExpenseChart;\n"]},"metadata":{},"sourceType":"module"}